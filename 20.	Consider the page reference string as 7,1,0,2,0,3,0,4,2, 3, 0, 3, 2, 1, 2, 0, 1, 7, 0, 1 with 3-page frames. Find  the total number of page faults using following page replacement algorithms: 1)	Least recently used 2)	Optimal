//Least Recently Used//
#include <stdio.h>

#define MAX_SIZE 1000

int findPageFaultsLRU(int pages[], int n, int capacity) {
    int pageFaults = 0;
    int frame[capacity];
    int lru[capacity];

    for (int i = 0; i < capacity; i++) {
        frame[i] = -1;
        lru[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int j, hit = 0;

        for (j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                lru[j] = i + 1;
                break;
            }
        }

        if (!hit) {
            int leastRecent = 0;

            for (j = 1; j < capacity; j++) {
                if (lru[j] < lru[leastRecent]) {
                    leastRecent = j;
                }
            }

            frame[leastRecent] = pages[i];
            lru[leastRecent] = i + 1;
            pageFaults++;
        }
    }

    return pageFaults;
}

int main() {
    int pages[] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    printf("Total page faults using LRU: %d\n", findPageFaultsLRU(pages, n, capacity));

    return 0;
}

//Optimal//
#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 1000

int findPageFaultsOptimal(int pages[], int n, int capacity) {
    int pageFaults = 0;
    int frame[capacity];
    bool present[capacity];

    for (int i = 0; i < capacity; i++) {
        frame[i] = -1;
        present[i] = false;
    }

    for (int i = 0; i < n; i++) {
        int j, hit = 0;

        for (j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                break;
            }
        }

        if (!hit) {
            int replace = -1;
            int farthest = i;

            for (j = 0; j < capacity; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) {
                        break;
                    }
                }

                if (k == n) {
                    replace = j;
                    break;
                }

                if (k > farthest) {
                    farthest = k;
                    replace = j;
                }
            }

            frame[replace] = pages[i];
            pageFaults++;
        }
    }

    return pageFaults;
}

int main() {
    int pages[] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    printf("Total page faults using Optimal: %d\n", findPageFaultsOptimal(pages, n, capacity));

    return 0;
}

