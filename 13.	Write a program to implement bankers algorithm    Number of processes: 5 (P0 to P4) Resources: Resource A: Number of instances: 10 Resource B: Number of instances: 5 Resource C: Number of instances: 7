#include <stdio.h>

#define NUMBER_OF_PROCESSES 5
#define NUMBER_OF_RESOURCES 3

int available[NUMBER_OF_RESOURCES];
int maximum[NUMBER_OF_PROCESSES][NUMBER_OF_RESOURCES];
int allocation[NUMBER_OF_PROCESSES][NUMBER_OF_RESOURCES];
int need[NUMBER_OF_PROCESSES][NUMBER_OF_RESOURCES];
int finish[NUMBER_OF_PROCESSES];

int request_resources(int pid, int request[]) {
    // Check if the request is within need and available resources
    for (int i = 0; i < NUMBER_OF_RESOURCES; i++) {
        if (request[i] > need[pid][i] || request[i] > available[i])
            return 0; // Request exceeds need or available resources
    }

    // Simulate allocation
    for (int i = 0; i < NUMBER_OF_RESOURCES; i++) {
        available[i] -= request[i];
        allocation[pid][i] += request[i];
        need[pid][i] -= request[i];
    }

    // Check if the system is in a safe state
    int work[NUMBER_OF_RESOURCES];
    for (int i = 0; i < NUMBER_OF_RESOURCES; i++)
        work[i] = available[i];

    int finished = 0;
    while (!finished) {
        finished = 1;
        for (int i = 0; i < NUMBER_OF_PROCESSES; i++) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < NUMBER_OF_RESOURCES; j++) {
                    if (need[i][j] > work[j])
                        break;
                }
                if (j == NUMBER_OF_RESOURCES) {
                    finish[i] = 1;
                    finished = 0;
                    for (j = 0; j < NUMBER_OF_RESOURCES; j++)
                        work[j] += allocation[i][j];
                }
            }
        }
    }

    // Rollback allocation if system is not in safe state
    if (!finished) {
        for (int i = 0; i < NUMBER_OF_RESOURCES; i++) {
            available[i] += request[i];
            allocation[pid][i] -= request[i];
            need[pid][i] += request[i];
        }
        return 0; // Request denied
    }

    return 1; // Request granted
}

int main() {
    // Initialize available resources
    available[0] = 10;
    available[1] = 5;
    available[2] = 7;

    // Initialize maximum resources for each process
    maximum[0][0] = 7;
    maximum[0][1] = 5;
    maximum[0][2] = 3;

    maximum[1][0] = 3;
    maximum[1][1] = 2;
    maximum[1][2] = 2;

    maximum[2][0] = 9;
    maximum[2][1] = 0;
    maximum[2][2] = 2;

    maximum[3][0] = 2;
    maximum[3][1] = 2;
    maximum[3][2] = 2;

    maximum[4][0] = 4;
    maximum[4][1] = 3;
    maximum[4][2] = 3;

    // Initialize allocation and need matrix
    for (int i = 0; i < NUMBER_OF_PROCESSES; i++) {
        for (int j = 0; j < NUMBER_OF_RESOURCES; j++) {
            allocation[i][j] = 0;
            need[i][j] = maximum[i][j];
        }
        finish[i] = 0;
    }

    // Example request for resources
    int pid = 1;
    int request[NUMBER_OF_RESOURCES] = {1, 1, 0}; // P1 requests 1 unit of A and 1 unit of B

    // Request resources and check if granted
    if (request_resources(pid, request)) {
        printf("Request granted for Process P%d\n", pid);
        printf("Updated Allocation Matrix:\n");
        for (int i = 0; i < NUMBER_OF_PROCESSES; i++) {
            for (int j = 0; j < NUMBER_OF_RESOURCES; j++) {
                printf("%d ", allocation[i][j]);
            }
            printf("\n");
        }
    } else {
        printf("Request denied for Process P%d\n", pid);
    }

    return 0;
}
