#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int in = 0, out = 0;
sem_t empty, full;
pthread_mutex_t mutex;

void* producer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        item = rand() % 100;  // Produce an item
        sem_wait(&empty);     // Decrease empty count
        pthread_mutex_lock(&mutex);

        // Add item to the buffer
        buffer[in] = item;
        in = (in + 1) % BUFFER_SIZE;
        printf("Produced: %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&full);      // Increase full count
    }
    return NULL;
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);      // Decrease full count
        pthread_mutex_lock(&mutex);

        // Remove item from buffer
        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE;
        printf("Consumed: %d\n", item);

        pthread_mutex_unlock(&mutex);
        sem_post(&empty);     // Increase empty count
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    // Wait for the threads to complete
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

sem_t rw_mutex;  // Semaphore for readers-writers exclusion
pthread_mutex_t mutex;  // Mutex for reader count
int reader_count = 0;
int shared_data = 0;

void* reader(void* arg) {
    for (int i = 0; i < 5; i++) {
        pthread_mutex_lock(&mutex);
        reader_count++;
        if (reader_count == 1) {
            sem_wait(&rw_mutex);  // First reader locks the resource
        }
        pthread_mutex_unlock(&mutex);

        // Read the shared data
        printf("Reader %ld: read %d\n", (long)arg, shared_data);

        pthread_mutex_lock(&mutex);
        reader_count--;
        if (reader_count == 0) {
            sem_post(&rw_mutex);  // Last reader unlocks the resource
        }
        pthread_mutex_unlock(&mutex);
    }
    return NULL;
}

void* writer(void* arg) {
    for (int i = 0; i < 5; i++) {
        sem_wait(&rw_mutex);  // Writer locks the resource

        // Write to the shared data
        shared_data++;
        printf("Writer %ld: wrote %d\n", (long)arg, shared_data);

        sem_post(&rw_mutex);  // Writer unlocks the resource
    }
    return NULL;
}

int main() {
    pthread_t readers[5], writers[5];

    // Initialize semaphore and mutex
    sem_init(&rw_mutex, 0, 1);
    pthread_mutex_init(&mutex, NULL);

    // Create reader and writer threads
    for (long i = 0; i < 5; i++) {
        pthread_create(&readers[i], NULL, reader, (void*)i);
        pthread_create(&writers[i], NULL, writer, (void*)i);
    }

    // Wait for the threads to complete
    for (int i = 0; i < 5; i++) {
        pthread_join(readers[i], NULL);
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphore and mutex
    sem_destroy(&rw_mutex);
    pthread_mutex_destroy(&mutex);

    return 0;
}
