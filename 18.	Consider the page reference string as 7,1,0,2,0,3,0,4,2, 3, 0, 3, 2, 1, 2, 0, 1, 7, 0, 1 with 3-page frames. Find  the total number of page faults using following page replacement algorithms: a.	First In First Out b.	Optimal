//First In First Out (FIFO)//
#include <stdio.h>

int findPageFaultsFIFO(int pages[], int n, int capacity) {
    int pageFaults = 0;
    int frame[capacity];
    int rear = -1;

    for (int i = 0; i < n; i++) {
        int j, hit = 0;
        for (j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                break;
            }
        }

        if (!hit) {
            pageFaults++;
            rear = (rear + 1) % capacity;
            frame[rear] = pages[i];
        }
    }

    return pageFaults;
}

int main() {
    int pages[] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    printf("Total page faults using FIFO: %d\n", findPageFaultsFIFO(pages, n, capacity));

    return 0;
}

//Optimal//
#include <stdio.h>
#include <stdbool.h>

int findPageFaultsOptimal(int pages[], int n, int capacity) {
    int pageFaults = 0;
    int frame[capacity];
    bool used[capacity];
    int index = 0;

    for (int i = 0; i < capacity; i++) {
        frame[i] = -1;
        used[i] = false;
    }

    for (int i = 0; i < n; i++) {
        bool hit = false;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = true;
                break;
            }
        }

        if (!hit) {
            int j;
            if (index < capacity) {
                frame[index] = pages[i];
                index++;
            } else {
                int replace;
                for (j = 0; j < capacity; j++) {
                    int k;
                    for (k = i + 1; k < n; k++) {
                        if (frame[j] == pages[k]) {
                            break;
                        }
                    }
                    if (k == n) {
                        replace = j;
                        break;
                    }
                }
                frame[replace] = pages[i];
            }
            pageFaults++;
        }
    }

    return pageFaults;
}

int main() {
    int pages[] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    printf("Total page faults using Optimal: %d\n", findPageFaultsOptimal(pages, n, capacity));

    return 0;
}

