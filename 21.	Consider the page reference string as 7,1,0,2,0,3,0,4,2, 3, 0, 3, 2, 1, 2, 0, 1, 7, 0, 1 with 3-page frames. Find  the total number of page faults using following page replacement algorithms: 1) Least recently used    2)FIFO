//Least Recently Used (LRU)//
#include <stdio.h>

#define MAX_SIZE 1000

int findPageFaultsLRU(int pages[], int n, int capacity) {
    int pageFaults = 0;
    int frame[capacity];
    int lru[capacity];

    for (int i = 0; i < capacity; i++) {
        frame[i] = -1;
        lru[i] = 0;
    }

    for (int i = 0; i < n; i++) {
        int j, hit = 0;

        for (j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                lru[j] = i + 1;
                break;
            }
        }

        if (!hit) {
            int leastRecent = 0;

            for (j = 1; j < capacity; j++) {
                if (lru[j] < lru[leastRecent]) {
                    leastRecent = j;
                }
            }

            frame[leastRecent] = pages[i];
            lru[leastRecent] = i + 1;
            pageFaults++;
        }
    }

    return pageFaults;
}

int main() {
    int pages[] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    printf("Total page faults using LRU: %d\n", findPageFaultsLRU(pages, n, capacity));

    return 0;
}

//First In First Out (FIFO)//
#include <stdio.h>

#define MAX_SIZE 1000

int findPageFaultsFIFO(int pages[], int n, int capacity) {
    int pageFaults = 0;
    int frame[capacity];
    int front = 0, rear = 0;

    for (int i = 0; i < n; i++) {
        int j, hit = 0;

        for (j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                hit = 1;
                break;
            }
        }

        if (!hit) {
            if (rear < capacity) {
                frame[rear++] = pages[i];
            } else {
                frame[front] = pages[i];
                front = (front + 1) % capacity;
            }
            pageFaults++;
        }
    }

    return pageFaults;
}

int main() {
    int pages[] = {7, 1, 0, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    printf("Total page faults using FIFO: %d\n", findPageFaultsFIFO(pages, n, capacity));

    return 0;
}

