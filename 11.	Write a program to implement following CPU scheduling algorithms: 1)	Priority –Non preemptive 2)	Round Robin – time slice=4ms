//Priority Scheduling - Non-preemptive//
#include <stdio.h>

struct Process {
    int pid;           // Process ID
    int burst_time;    // Burst Time
    int priority;      // Priority (lower value means higher priority)
    int waiting_time;  // Waiting Time
    int turnaround_time; // Turnaround Time
    int arrival_time;  // Arrival Time
};

void findWaitingTimePriorityNonPreemptive(struct Process proc[], int n) {
    int completed = 0;
    int t = 0;
    int shortest = -1;
    int min_priority = __INT_MAX__;
    int check = 0;

    for (int i = 0; i < n; i++) {
        proc[i].waiting_time = 0;
    }

    while (completed != n) {
        for (int j = 0; j < n; j++) {
            if ((proc[j].arrival_time <= t) && (proc[j].priority < min_priority) && (proc[j].waiting_time == 0)) {
                min_priority = proc[j].priority;
                shortest = j;
                check = 1;
            }
        }

        if (check == 0) {
            t++;
            continue;
        }

        t += proc[shortest].burst_time;
        proc[shortest].waiting_time = t - proc[shortest].burst_time - proc[shortest].arrival_time;

        if (proc[shortest].waiting_time < 0)
            proc[shortest].waiting_time = 0;

        min_priority = __INT_MAX__;
        completed++;
        check = 0;
    }
}

void findTurnaroundTime(struct Process proc[], int n) {
    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
    }
}

void findAvgTimePriorityNonPreemptive(struct Process proc[], int n) {
    findWaitingTimePriorityNonPreemptive(proc, n);
    findTurnaroundTime(proc, n);

    int total_waiting_time = 0, total_turnaround_time = 0;
    printf("Processes   Burst Time   Priority   Waiting Time   Turnaround Time\n");

    // Calculate total waiting and turnaround time
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf(" %d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].priority, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("Average waiting time = %.2f\n", (float)total_waiting_time / n);
    printf("Average turnaround time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    struct Process proc[] = {{1, 10, 1, 0, 0, 0}, {2, 5, 3, 0, 0, 1}, {3, 8, 2, 0, 0, 2}, {4, 6, 4, 0, 0, 3}};
    int n = sizeof(proc) / sizeof(proc[0]);

    findAvgTimePriorityNonPreemptive(proc, n);

    return 0;
}

//Round Robin - Time Slice = 4 ms//
#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int burst_time; // Burst Time
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
    int remaining_time; // Remaining Burst Time
};

void findWaitingTimeRR(struct Process proc[], int n, int quantum) {
    int t = 0; // Current time
    int completed = 0;
    int i = 0;

    // Initialize remaining times
    for (i = 0; i < n; i++) {
        proc[i].remaining_time = proc[i].burst_time;
    }

    while (completed != n) {
        for (i = 0; i < n; i++) {
            if (proc[i].remaining_time > 0) {
                if (proc[i].remaining_time > quantum) {
                    t += quantum;
                    proc[i].remaining_time -= quantum;
                } else {
                    t += proc[i].remaining_time;
                    proc[i].waiting_time = t - proc[i].burst_time;
                    proc[i].remaining_time = 0;
                    completed++;
                }
            }
        }
    }
}

void findTurnaroundTime(struct Process proc[], int n) {
    // Calculate turnaround time for each process
    for (int i = 0; i < n; i++) {
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
    }
}

void findAvgTimeRR(struct Process proc[], int n, int quantum) {
    findWaitingTimeRR(proc, n, quantum);
    findTurnaroundTime(proc, n);

    int total_waiting_time = 0, total_turnaround_time = 0;
    printf("Processes   Burst Time   Waiting Time   Turnaround Time\n");

    // Calculate total waiting and turnaround time
    for (int i = 0; i < n; i++) {
        total_waiting_time += proc[i].waiting_time;
        total_turnaround_time += proc[i].turnaround_time;
        printf(" %d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].waiting_time, proc[i].turnaround_time);
    }

    printf("Average waiting time = %.2f\n", (float)total_waiting_time / n);
    printf("Average turnaround time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    struct Process proc[] = {{1, 10}, {2, 5}, {3, 8}, {4, 6}};
    int n = sizeof(proc) / sizeof(proc[0]);
    int quantum = 4;

    findAvgTimeRR(proc, n, quantum);

    return 0;
}
